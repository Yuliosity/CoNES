ct U[25] game_palette = U[25](
    // Tiles
    $0a, $12, $22,
    $00, $16, $27,
    $1c, $18, $29,
    $00, $10, $15,
    // Sprites
    $0c, $00, $00,
    $0f, $0f, $0f,
    $0f, $0f, $0f,
    $0f, $0f, $0f,
    // Background color
    $0f)

ct U LEFT_TILE = 3
ct U TOP_TILE = 3
ct U LEFT_SCREEN = U(8 * LEFT_TILE)
ct U TOP_SCREEN = U(8 * TOP_TILE)

data /bkg
    [] level_bkg
        file(raw, "assets/layout.nam") //"level.nam")

fn load_nametable(CCC/bkg nametable)
    ppu_reset_addr($2000)
    for UU i = 0; i < 1024; i += 1
        {PPUDATA}(nametable{i})

vars /level
    U[216] map

vars /player
    U player_x = 2
    U player_y = 2
    U player_z = 2
    //U player_hp = 10

//Cell type constants
ct U CHEST = $01
ct U BOOK = $02
ct U VENDOR = $03
ct U WARP = $06
ct U SINKHOLE = $07
ct U ORB = $08
ct U POOL = $09
ct U COIN = $24
ct U FLARE = $28
//Gethe the NW tile of a cell.         
//They are organized in 2x2 metatiles, so the rest are:
//      x NW NE x + 1
//x + $10 SW SE x + $11
fn get_tile(U cell) U
    ct U[10] res = U[10]($00, $68, $6A, $8E, $60, $62, $66, $64, $6C, $6E)
    U tile = $FF
    //TODO: hidden cells
    cell &= $7F
    if cell < 10
        tile = res[cell]
    else if cell == COIN
        tile = $86
    else if cell == FLARE
        tile = $84
    else if cell & $40 //Monster
        tile = $A0 | (((cell >> 3) & $07) << 1)
    return tile

fn generate_map()
    //76543210 - 8-bit format of the CoNE map cell
    //1xxxxxxx - visited (known) cell
    //v1iiihhh - is a monster, where iii is the monster upper index, hhh is its current HP
    //Monster's upper index is current_floor mod 2, so full undex is 8*upper+lower
    //v01xxxxx - an item:
    //  if 5 set, 4 - is an artefact //???
    //v011xxx_ - 0-4 gems, 5 goldsign, 6 bluefire
    //v010xx__ - 0 gold, 1 flare, 2 lamp, 3 unused
    //v010hhhh - final boss with hhhh extra HP
    //v000iiii - interactive object:
    //    0 empty cell, 1 chest,       2 book, 3 vendor
    //    4 stairs up,  5 stairs down, 6 warp, 7 sinkhole
    //    8 orb,        9 pool, 10-14 unused (different vendors?)
    //    15 - empty cell
    for U i = 0; i < 216; i += 1
        U x = rand()
        U y
        if x < $50
            y = $40 | (x & 8 << 3) | (x & 8) //Monster type x mod 8, with type-dependent HP
        else if x < $60
            y = CHEST
        else if x < $70
            y = BOOK
        else if x < $80
            y = COIN
        else if x < $90
            y = FLARE
        else if x < $98
            y = VENDOR
        else if x < $A0
            y = WARP
        else if x < $A8
            y = SINKHOLE
        else if x < $B0
            y = ORB
        else if x < $B8
            y = POOL
        else
            y = $00 //Empty
        map[i] = y

        // TODO: also place:
        // artefacts
        // final boss
        // stairs
        // lamp

//Return the OAM address for a given tile
fn calc_addr(U x, U y) UU
: +inline
    return $2000 + UU($20 * (TOP_TILE + U(3 * y))) + UU(LEFT_TILE + U(3 * x))

fn render_cell(UU addr, U tile)
: +inline
    if tile == 0
                //Draw the top half
        ppu_set_addr(addr)
                {PPUDATA}(0)
                {PPUDATA}(0)
                //Draw the bottom half
        ppu_set_addr(addr + $20)
                {PPUDATA}(0)
                {PPUDATA}(0)
            else
                //Draw the top half
        ppu_set_addr(addr)
        {PPUDATA}(tile)
        {PPUDATA}(tile + 1)
        //Draw the bottom half
                ppu_reset_addr(addr + $20)
        {PPUDATA}(tile + $10)
        {PPUDATA}(tile + $11)
    ppu_reset_scroll(0, 0) //HACK
            //TODO: set attributes

fn show_current_cell()
    UU addr = calc_addr(player_x, player_y)
    U i = U(player_z * 36) + U(player_y * 6) + player_x
    map[i] |= $80
    render_cell(addr, get_tile(map[i]))

fn render_floor()
    I.map cell = I.map(player_z * 36)
    //UU row_addr = $2000
    UU row_addr = calc_addr(0, 0)
    //Iterate by rows
    for U y = 0; y < 6; y += 1
        //UU addr = row_addr
        for U x = 0; x < 6; x += 1
            UU addr = calc_addr(x, y)
            if (cell[x] & $80 || visible_debug)
                render_cell(addr, get_tile(cell[x]))
            else //Hidden cell
                render_cell(addr, $8A) 
            addr += 3
        cell += 6
        row_addr += $60
    //TODO: set attributes
    ppu_reset_addr($23C0)
    for U i = 0; i < 64; i += 1
        {PPUDATA}(%01101001)

fn inc_wrap(U val) U
    val += 1
    if val > 5
        val = 0
    return val

fn dec_wrap(U val) U
    if val == 0
        val = 6
    return val - 1

fn set_player_x()
    U scr_x = TOP_SCREEN + U(player_x * 24)
    set_oam_x(0, scr_x)
    set_oam_x(4, scr_x + 8)
    set_oam_x(8, scr_x)
    set_oam_x(12, scr_x + 8)

fn set_player_y()
    U scr_y = LEFT_SCREEN + U(player_y * 24)
    set_oam_y(0, scr_y)
    set_oam_y(4, scr_y)
    set_oam_y(8, scr_y + 8)
    set_oam_y(12, scr_y + 8)

fn pads_level()
    U pressed = pads[0].pressed
    if pressed & BUTTON_UP
        player_y = dec_wrap(player_y)
        set_player_y()
        show_current_cell()
    else if pressed & BUTTON_DOWN
        player_y = inc_wrap(player_y)
        set_player_y()
        show_current_cell()
    if pressed & BUTTON_LEFT
        player_x = dec_wrap(player_x)
        set_player_x()
        show_current_cell()
    else if pressed & BUTTON_RIGHT
        player_x = inc_wrap(player_x)
        set_player_x()
        show_current_cell()

nmi main_nmi()
    ppu_upload_oam_poll_pads(0)
    {PPUMASK}(PPUMASK_ON | PPUMASK_NO_CLIP)

fn set_oam_pa(I.oam index, U p, U a)
: +inline
    oam{OAM_P + UU(index)} = p
    oam{OAM_A + UU(index)} = a

mode main() 
: nmi main_nmi
    // Set the palette:
    palette = game_palette
    ppu_upload_palette()

    generate_map()
    player_x = 2 //randb(6)
    player_y = 2 //randb(6)
    player_z = 2 //randb(6)
    render_floor()

    //Set the player sprite
    set_oam_pa(0, $E2, 0)
    set_oam_pa(4, $E3, 0)
    set_oam_pa(8, $F2, 0)
    set_oam_pa(12, $F3, 0)
    set_player_x()
    set_player_y()

    //Set sprites for room borders
    U spr = 16
    for U x = 16; x < 16 + 7 * 24; x += 24
        for U y = 16; y < 16 + 7 * 24; y += 24
            spr = push_oam(spr, x, y, $FB, 0)
    hide_oam(spr)

    ppu_reset_scroll(0, 0)
    {PPUCTRL}(PPUCTRL_NMI_ON)

    while true
        update_pads()
        pads_level()
        nmi

chrrom
    file(fmt, "assets/tileset.chr")
